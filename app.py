import streamlit as st
import requests
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
import io
import re

BASE_URL = "http://localhost:8000"

def initialize_session():
    for key, default in {
        "token": None, "username": None, "flashcards": [], "topics_hierarchy": {},
        "selected_topics": [], "messages": [], "file_path": None, "selected_model": "gemini",
        "notes_text": "", "report": None,"mcqs": []
    }.items():
        if key not in st.session_state:
            st.session_state[key] = default

def api_request(endpoint, method="POST", **kwargs):
    url = f"{BASE_URL}/{endpoint}/"
    try:
        response = requests.request(method, url, **kwargs)
        if response.status_code == 200:
            try:
                return response.json()
            except ValueError:
                return response.text
        return None
    except requests.RequestException as e:
        st.error(f"❌ API Error: {str(e)}")
        return None

def register():
    st.subheader("📝 Register")
    username, password = st.text_input("Username"), st.text_input("Password", type="password")
    if st.button("Register") and username and password:
        response = api_request("register", data={"username": username, "password": password})
        st.success("✅ Registration successful!") if response else st.error("❌ Registration failed.")

def login():
    st.subheader("🔑 Login")
    username, password = st.text_input("Username", key="login_username"), st.text_input("Password", type="password", key="login_password")
    if st.button("Login") and username and password:
        response = api_request("login", data={"username": username, "password": password})
        if response:
            st.session_state.update({"token": response["access_token"], "username": username})
            st.success("✅ Login successful!")
            st.rerun()
        else:
            st.error("❌ Login failed.")

def logout():
    st.session_state.update({"token": None, "username": None})
    st.success("✅ Logged out successfully!")
    st.rerun()

def generate_notes():
    st.title("Notesight POC - 📄 Generate Notes")
    uploaded_files = st.file_uploader("Upload Files for Notes Generation", accept_multiple_files=True)
    model = st.selectbox("Select AI Model", ["gemini", "chatgpt", "mistral"])
    if uploaded_files and st.button("📝 Generate Notes"):
        files = [("files", (file.name, file, "application/pdf")) for file in uploaded_files]
        response = requests.post(f"{BASE_URL}/notes/", files=files, data={"model": model}, stream=True)
        if response.status_code == 200:
            st.session_state.notes_text = "" 
            notes_placeholder = st.empty()
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    st.session_state.notes_text += chunk.decode("utf-8")
                    notes_placeholder.markdown(st.session_state.notes_text, unsafe_allow_html=True)
        else:
            st.error("❌ Failed to generate notes")
    if st.session_state.notes_text:
        st.subheader("Generated Notes:")
        st.markdown(st.session_state.notes_text)

def generate_flashcards():
    st.title("Notesight POC - 📚 Flashcard Generator")
    uploaded_files = st.file_uploader("Upload Files for Flashcards", accept_multiple_files=True)
    model = st.selectbox("Select AI Model", ["gemini", "chatgpt", "mistral"])
    if uploaded_files and st.button("🔹 Generate Flashcards"):
        files = [("files", (file.name, file, "application/pdf")) for file in uploaded_files]
        data = {"model": model}
        with st.spinner(f"Generating flashcards using {model}... ⏳"):
            response = requests.post(f"{BASE_URL}/flashcards/", files=files, data=data)
        if response.status_code == 200:
            st.session_state.flashcards = response.json().get("flashcards", [])

            if st.session_state.flashcards:
                st.success(f"✅ Flashcards Generated Using {model}")
            else:
                st.warning("⚠ No flashcards were generated.")
        else:
                st.error(f"❌ Failed to generate flashcards using {model}")

    if st.session_state.flashcards:
        st.subheader(f"📝 Flashcards (Generated by {model})")
        for flashcard in st.session_state.flashcards:
            with st.expander(f"**{flashcard.get('concept', 'Unknown Concept')}**"):
                st.write(flashcard.get("definition", "No Definition Provided"))

def document_chat():
    st.title("Notesight POC - Document QA")
    selected_model = st.selectbox("🤖 Select AI Model", ["Gemini", "ChatGPT"], index=0)
    uploaded_file = st.file_uploader("Upload a File")
    if uploaded_file and st.button("📤 Upload File"):
        response = api_request("upload", files={"file": (uploaded_file.name, uploaded_file, "application/pdf")}, data={"model": selected_model.lower()})
        if response:
            st.success("✅ File uploaded successfully!")
            st.session_state.file_path = response.get("file_path")
    st.subheader("💬 Ask Questions About the Document")
    query = st.chat_input("Ask a question...")
    if query:
        response = api_request("ask", data={"query": query, "model": selected_model.lower()})
        answer = response.get("answer", "⚠ No response received.") if response else "❌ Failed to get a response."
        st.session_state.messages.append({"role": "user", "content": query})
        st.session_state.messages.append({"role": "assistant", "content": answer})
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

def report_card():
    st.title("Student Report Generator")
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    st.session_state.report=[]
    if uploaded_file and st.button("Generate Report"):
        files = {"file": uploaded_file.getvalue()}
        response = requests.post(f"{BASE_URL}/report/", files=files)
        if response.status_code==200:
            st.session_state.report = response.get("data")
        else: st.error("Failed to generate report")
    if st.session_state.report:
        report = st.session_state.report
        if isinstance(report, dict):
            if report['student_info']['name'] == "Unknown" and report['student_info']['roll_number'] == "Unknown":
                st.error("❌ Failed to generate report")
            else:
                st.subheader("Generated Report")
                st.write(f"**Student Name:** {report['student_info']['name']}")
                st.write(f"**Roll Number:** {report['student_info']['roll_number']}")
                st.write(f"**Grade:** {report['student_info']['grade']}")
                st.write(f"**School:** {report['student_info']['school']}")
                st.subheader("Subject Performance")
                for subject, details in report["subject_performance"].items():
                    st.write(f"- **{subject}:** {details.get('final_grade', 'N/A')}")
                st.subheader("Strengths")
                st.write(", ".join(report["strengths"]) if report["strengths"] else "No strengths identified.")

                st.subheader("Weaknesses")
                for weakness in report["weaknesses"]:
                    st.write(f"- **{weakness['subject']}**: {weakness['reason']}")

                st.subheader("Overall Performance Summary")
                st.write(report["overall_performance_summary"])
        else:
            st.error("❌ Failed to generate a structured report. Response received:")
            st.text_area("Response", report, height=200)

def mcq_generation():
    st.title("📘 Notesight POC - Generate MCQs")
    uploaded_files = st.file_uploader("📂 Upload PDFs for MCQ generation", type=["pdf"], accept_multiple_files=True)
    MODEL_OPTIONS = {"Gemini": "gemini", "ChatGPT": "chatgpt", "Mistral": "mistral"}
    selected_model = st.selectbox("🤖 Select AI Model", list(MODEL_OPTIONS.keys()))
    selected_model_key = MODEL_OPTIONS[selected_model]

    if "mcqs" not in st.session_state:
        st.session_state["mcqs"] = []

    if "mcq_answers" not in st.session_state:
        st.session_state["mcq_answers"] = {}

    if uploaded_files and st.button("🔍 Extract Topics"):
        files = [("files", (file.name, file, "application/pdf")) for file in uploaded_files]
        with st.spinner(f"Extracting topics using {selected_model.capitalize()}... ⏳"):
            response = requests.post(f"{BASE_URL}/mcqs/", files=files, data={"model": selected_model_key})
            if response.status_code == 200:
                st.session_state["topics_hierarchy"] = response.json().get("topics", {})
                st.success("✅ Topics Extracted! Select subtopics below.")
                st.session_state["file_paths"] = response.json().get("file_paths", [])
            else:
                st.error("❌ Failed to extract topics.")

    if st.session_state.get("topics_hierarchy"):
        st.subheader("📑 Select Subtopics for MCQ Generation")
        selected_subtopics = []
        for chapter, subtopics in st.session_state["topics_hierarchy"].items():
            with st.expander(f"📖 {chapter}"):
                chapter_selected = st.checkbox(f"Select All in {chapter}", key=f"{chapter}_all")
                for subtopic in subtopics:
                    subtopic_selected = st.checkbox(subtopic, key=f"{chapter}_{subtopic}", value=chapter_selected)
                    if subtopic_selected:
                        selected_subtopics.append(subtopic)
        st.session_state["selected_subtopics"] = selected_subtopics

    if st.session_state.get("selected_subtopics") and st.button("🎯 Generate MCQs"):
        with st.spinner(f"Generating MCQs using {selected_model.capitalize()}... ⏳"):
            response = requests.post(
                f"{BASE_URL}/mcqs/generate/",
                json={"topics": st.session_state["selected_subtopics"], "file_paths": st.session_state["file_paths"], "model": selected_model_key}
            )

        if response.status_code == 200:
            st.session_state["mcqs"] = response.json()  # Store MCQs persistently
            st.session_state["mcq_answers"] = {}  # Reset answers

    if st.session_state["mcqs"]:  # Show MCQs only if they exist
        st.subheader("📚 Generated MCQs")

        for i, mcq in enumerate(st.session_state["mcqs"]):
            with st.expander(f"📝 {mcq['question']}"):
                selected_option = st.radio(
                    "Select your answer:",
                    mcq["options"],
                    key=f"mcq_{i}"
                )

                if st.button(f"Check Answer {i}", key=f"check_{i}"):
                    st.session_state["mcq_answers"][i] = selected_option

                # Show answer feedback inside the expander
                if i in st.session_state["mcq_answers"]:
                    correct_answer = mcq["correct_answer"]
                    selected_option = st.session_state["mcq_answers"][i]

                    if selected_option == correct_answer:
                        st.success(f"✅ Correct!")
                    else:
                        st.error(f"❌ Incorrect! The correct answer is: **{correct_answer}**")

def profile():
    st.title("👤 User Profile")

    if not st.session_state.get("token"):
        st.warning("You need to be logged in to view your profile.")
        return

    headers = {"Authorization": f"Bearer {st.session_state.token}"}
    user_data = requests.get(f"{BASE_URL}/profile/", headers=headers).json()

    if not user_data:
        st.error("❌ Failed to fetch profile details.")
        return

    # Display Profile Details
    st.subheader("Profile Information")
    st.text_input("Username", value=user_data.get("username"), disabled=True)

    # Display Latest Report if Available
    latest_report = user_data.get("latest_report")
    if latest_report:
        st.subheader("📄 Latest Report")
        st.write(f"**Student Name:** {latest_report['student_info']['name']}")
        st.write(f"**Roll Number:** {latest_report['student_info']['roll_number']}")
        st.write(f"**Grade:** {latest_report['student_info']['grade']}")
        st.write(f"**School:** {latest_report['student_info']['school']}")

        st.subheader("📊 Subject Performance")
        for subject, details in latest_report["subject_performance"].items():
            st.write(f"- **{subject}:** {details.get('final_grade', 'N/A')}")

        st.subheader("💡 Strengths")
        st.write(", ".join(latest_report["strengths"]) if latest_report["strengths"] else "No strengths identified.")

        st.subheader("⚠ Weaknesses")
        for weakness in latest_report["weaknesses"]:
            st.write(f"- **{weakness['subject']}**: {weakness['reason']}")

        st.subheader("📌 Overall Performance Summary")
        st.write(latest_report["overall_performance_summary"])
    else:
        st.info("No report available. Please upload one.")

    # Upload New Report
    st.subheader("📤 Upload New Report")
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])
    if uploaded_file and st.button("Upload & Generate Report"):
        files = {"file": uploaded_file.getvalue()}
        response = requests.post(f"{BASE_URL}/report-profile/", files=files, headers=headers)

        if response.status_code == 200:
            st.success("✅ Report uploaded and generated successfully! Refresh to view.")
            st.rerun()
        else:
            st.error("❌ Failed to generate report.")

def main():
    initialize_session()
    st.set_page_config(layout="wide", page_title="POC for Notesight")
    if st.session_state.token:
        page = st.sidebar.radio("Features", ["Notes", "Flashcards", "MCQ", "Report Card","Profile"], key="page")
        if st.sidebar.button("Logout"): logout()
    else:
        tab1, tab2 = st.tabs(["🔑 Login", "📝 Register"])
        with tab1: login()
        with tab2: register()
    if st.session_state.token:
        page_map = {"Notes": generate_notes, "Flashcards": generate_flashcards, "Chat": document_chat, "Report Card": report_card, "MCQ": mcq_generation,"Profile":profile}
        page_map.get(st.session_state.page, lambda: None)()

if __name__ == "__main__":
    main()